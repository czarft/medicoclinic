0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'install', 'persistencejs' ]
2 info using npm@1.1.62
3 info using node@v0.8.11
4 verbose read json /Users/czarft/package.json
5 verbose read json /Users/czarft/node_modules/persistencejs/package.json
6 verbose read json /Users/czarft/node_modules/sqlite3/package.json
7 verbose read json /Users/czarft/package.json
8 verbose cache add [ 'persistencejs', null ]
9 silly cache add name=undefined spec="persistencejs" args=["persistencejs",null]
10 verbose parsed url { pathname: 'persistencejs',
10 verbose parsed url   path: 'persistencejs',
10 verbose parsed url   href: 'persistencejs' }
11 silly lockFile 8310bc89-persistencejs persistencejs
12 verbose lock persistencejs /Users/czarft/.npm/8310bc89-persistencejs.lock
13 silly lockFile 8310bc89-persistencejs persistencejs
14 verbose addNamed [ 'persistencejs', '' ]
15 verbose addNamed [ null, '' ]
16 silly lockFile 1015e5c7-persistencejs persistencejs@
17 verbose lock persistencejs@ /Users/czarft/.npm/1015e5c7-persistencejs.lock
18 silly addNameRange { name: 'persistencejs', range: '', hasData: false }
19 verbose url raw persistencejs
20 verbose url resolving [ 'https://registry.npmjs.org/', './persistencejs' ]
21 verbose url resolved https://registry.npmjs.org/persistencejs
22 info trying registry request attempt 1 at 18:29:59
23 verbose etag "DD0H7QXYJ4DOSK7OCA0JU4M3P"
24 http GET https://registry.npmjs.org/persistencejs
25 http 304 https://registry.npmjs.org/persistencejs
26 silly registry.get cb [ 304,
26 silly registry.get   { server: 'CouchDB/1.2.0 (Erlang OTP/R15B)',
26 silly registry.get     etag: '"DD0H7QXYJ4DOSK7OCA0JU4M3P"',
26 silly registry.get     date: 'Fri, 05 Oct 2012 11:30:03 GMT',
26 silly registry.get     'content-length': '0' } ]
27 verbose etag persistencejs from cache
28 silly addNameRange number 2 { name: 'persistencejs', range: '', hasData: true }
29 silly addNameRange versions [ 'persistencejs',
29 silly addNameRange   [ '0.2.0', '0.2.1', '0.2.2', '0.2.3', '0.2.4', '0.2.5' ] ]
30 verbose addNamed [ 'persistencejs', '0.2.5' ]
31 verbose addNamed [ '0.2.5', '0.2.5' ]
32 silly lockFile c7d486a4-persistencejs-0-2-5 persistencejs@0.2.5
33 verbose lock persistencejs@0.2.5 /Users/czarft/.npm/c7d486a4-persistencejs-0-2-5.lock
34 verbose read json /Users/czarft/.npm/persistencejs/0.2.5/package/package.json
35 silly lockFile c7d486a4-persistencejs-0-2-5 persistencejs@0.2.5
36 silly lockFile 1015e5c7-persistencejs persistencejs@
37 silly resolved [ { name: 'persistencejs',
37 silly resolved     version: '0.2.5',
37 silly resolved     engine: 'node >=0.2.0',
37 silly resolved     author: { name: 'Zef Hemel' },
37 silly resolved     directories: { lib: './lib' },
37 silly resolved     dependencies: { mysql: '>=0.7.0', sqlite: '>=1.0.2' },
37 silly resolved     contributors:
37 silly resolved      [ [Object],
37 silly resolved        [Object],
37 silly resolved        [Object],
37 silly resolved        [Object],
37 silly resolved        [Object],
37 silly resolved        [Object],
37 silly resolved        [Object],
37 silly resolved        [Object],
37 silly resolved        [Object],
37 silly resolved        [Object],
37 silly resolved        [Object],
37 silly resolved        [Object],
37 silly resolved        [Object],
37 silly resolved        [Object] ],
37 silly resolved     readme: 'persistence.js\n==============\n`persistence.js` is a asynchronous Javascript object-relational\nmapper library. It can be used both in the web browser and on\nthe server using [node.js](http://nodejs.org). It currently\nsupports 4 types of data stores:\n\n* [HTML5 WebSQL database](http://dev.w3.org/html5/webdatabase/), a\n  somewhat controversial part of HTML5 that is supported in Webkit\n  browsers, specifically on mobile devices, including iPhone, Android\n  and Palm\'s WebOS. \n* [Google Gears](http://gears.google.com), a browser plug-in that adds\n  a number of feature to the browser, including a in-browser database.\n* [MySQL](http://www.mysql.com), using the\n  [node-mysql](http://github.com/felixge/node-mysql), node.js module\n  on the server.\n* In-memory, as a fallback. Keeps the database in memory and is\n  cleaned upon a page refresh (or server restart), unless saved to\n  [localStorage](http://dev.w3.org/html5/webstorage/).\n\nThere is also an experimental support for [Qt 4.7 Declarative UI\nframework\n(QML)](http://doc.trolltech.org/4.7-snapshot/declarativeui.html) which\nis an extension to JavaScript.\n\nFor browser use, `persistence.js` has no dependencies on any other\nframeworks, other than the Google Gears [initialization\nscript](http://code.google.com/apis/gears/gears_init.js), in case you\nwant to enable Gears support.\n\nPlug-ins\n--------\n\nThere are a few `persistence.js` plug-ins available that add functionality:\n\n* `persistence.search.js`, adds simple full-text search capabilities,\n  see `docs/search.md` for more information.\n* `persistence.migrations.js`, supports data migrations (changes to\n  the database schema), see `docs/migrations.md` for more information.\n* `persistence.sync.js`, supports database synchronization with a\n  remote server, see `docs/sync.md` for more information.\n* `jquery.persistence.js`, adds jQuery integration, including \n  jQuery-mobile ajax request interception and re-routing to persistencejs,\n  see `docs/jquery.md` for more information and `demo/jquerymobile` for a \n  simple demo.\n\nA Brief Intro to Async Programming\n----------------------------------\n\nIn browsers, Javascript and the web page\'s rendering engine share\na single thread. The result of this is that only one thing can happen\nat a time. If a database query would be performed _synchronously_,\nlike in many other programming environments like Java and PHP the\nbrowser would freeze from the moment the query was issued until the\nresults came back. Therefore, many APIs in Javascript are defined as\n_asynchronous_ APIs, which mean that they do not block when an\n"expensive" computation is performed, but instead provide the call\nwith a function that will be invoked once the result is known. In the\nmeantime, the browser can perform other duties.\n\nFor instance, a synchronous database call call would look as follows:\n\n    var results = db.query("SELECT * FROM Table");\n    for(...) { ... }\n\nThe execution of the first statement could take half a second, during\nwhich the browser doesn\'t do anything else. By contrast, the\nasynchronous version looks as follows:\n\n    db.query("SELECT * FROM Table", function(results) {\n      for(...) { ... }\n    });\n\nNote that there will be a delay between the `db.query` call and the\nresult being available and that while the database is processing the\nquery, the execution of the Javascript continues. To make this clear,\nconsider the following program:\n    \n    db.query("SELECT * FROM Table", function(results) {\n      console.log("hello");\n    });\n    console.log("world");\n\nAlthough one could assume this would print "hello", followed by\n"world", the result will likely be that "world" is printed before\n"hello", because "hello" is only printed when the results from the\nquery are available. This is a tricky thing about asynchronous\nprogramming that a Javascript developer will have to get used to.\n\nUsing persistence.js in the browser\n===================================\n\nBrowser support\n---------------\n\n* Modern webkit browsers (Google Chrome and Safari)\n* Firefox (through Google Gears)\n* Opera\n* Android browser (tested on 1.6 and 2.x)\n* iPhone browser (iPhone OS 3+)\n* Palm WebOS (tested on 1.4.0)\n* Other browsers supporting `localStorage` (e.g. Firefox)\n\n(The following is being worked on:)\nInternet Explorer is likely not supported (untested) because it\nlacks `__defineGetter__` and `__defineSetter__` support, which\n`persistence.js` uses heavily. This may change in IE 9.\n\nSetting up\n----------\n\nTo use `persistence.js` you need to clone the git repository:\n\n    git clone git://github.com/zefhemel/persistencejs.git\n\nTo use it you need to copy `lib/persistence.js` to your web directory,\nas well as any data stores you want to use. Note that the `mysql` and\n`websql` stores both depend on the `sql` store. A typical setup\nrequires you to copy at least `lib/persistence.js`,\n`lib/persistence.store.sql.js` and `lib/persistence.store.websql.js` to your\nweb directory. You can then load them as follows:\n\n    <script src="persistence.js" type="application/javascript"></script>\n    <script src="persistence.store.sql.js" type="application/javascript"></script>\n    <script src="persistence.store.websql.js" type="application/javascript"></script>\n\nIf you want to use the in-memory store (in combination with\n`localStorage`) you also need the `persistence.store.memory.js`\nincluded.\n\n\nSetup your database\n-------------------\n\nYou need to explicitly configure the data store you want to use,\nconfiguration of the data store is store-specific. The WebSQL store\n(which includes Google Gears support) is configured as follows:\n\n    persistence.store.websql.config(persistence, \'yourdbname\', \'A database description\', 5 * 1024 * 1024);\n\nThe first argument is always supposed to be `persistence`. The second\nin your database name (it will create it if it does not already exist,\nthe third is a description for you database, the last argument is the\nmaximum size of your database in bytes (5MB in this example).\n\nThe in-memory store\n---------------------------------------\n\nThe in-memory store is offered as a fallback for browsers that do not\nsupport any of the other supported stores (e.g. WebSQL or Gears). In\nprincipal, it only keeps data in memory, which means that navigating\naway from the page (including a reload or tab close) will result in\nthe loss of all data.\n\nA way around this is using the `persistence.saveToLocalStorage` and\n`persistence.loadFromLocalStorage` functions that can save the entire\ndatabase to the [localStorage](http://dev.w3.org/html5/webstorage/), which\nis persisted indefinitely (similar to WebSQL).\n\nIf you\'re going to use the in-memory store, you can configure it as follows:\n\n    persistence.store.memory.config(persistence);\n\nThen, if desired, current data can be loaded from the localStorage using:\n\n    persistence.loadFromLocalStorage(function() {\n      alert("All data loaded!");\n    });\n\nAnd saved using:\n\n    persistence.saveToLocalStorage(function() {\n      alert("All data saved!");\n    });\n\nDrawbacks of the in-memory store:\n\n* Performance: All actions that are typically performed by a database\n  (sorting, filtering), are now all performed in-memory using\n  Javascript.\n* Limited database size: Loading and saving requires serialization of\n  all data from and to JSON, which gets more expensive as your dataset\n  grows. Most browsers have a maximum size of 5MB for `localStorage`.\n* Synchronous behavior: Although the API is asynchronous, all\n  persistence actions will be performed synchronously on the main\n  Javascript thread, which may make the browser less responsive.\n\nSchema definition\n-----------------\n\nA data model is declared using `persistence.define`. The following two\ndefinitions define a `Task` and `Category` entity with a few simple\nproperties. The property types are based on [SQLite\ntypes](http://www.sqlite.org/datatype3.html), specifically supported\ntypes are (but any SQLite type is supported):\n\n* `TEXT`: for textual data \n* `INT`: for numeric values\n* `BOOL`: for boolean values (`true` or `false`)\n* `DATE`: for date/time value (with precision of 1 second)\n* `JSON`: a special type that can be used to store arbitrary\n  [JSON](http://www.json.org) data. Note that this data can not be used\n  to filter or sort in any sensible way. If internal changes are made to a `JSON`\n  property, `persistence.js` may not register them. Therefore, a manual\n  call to `anObj.markDirty(\'jsonPropertyName\')` is required before calling\n  `persistence.flush`.\n\nExample use:\n    \n    var Task = persistence.define(\'Task\', {\n      name: "TEXT",\n      description: "TEXT",\n      done: "BOOL"\n    });\n\n    var Category = persistence.define(\'Category\', {\n      name: "TEXT",\n      metaData: "JSON"\n    });\n\n    var Tag = persistence.define(\'Task\', {\n      name: "TEXT"\n    });\n\nThe returned values are constructor functions and can be used to\ncreate new instances of these entities later.\n\nIt is possible to create indexes on one or more columns using\n`EntityName.index`, for instance:\n\n    Task.index(\'done\');\n    Task.index([\'done\', \'name\']);\n\nThese indexes can also be used to impose unique constraints :\n\n    Task.index([\'done\', \'name\'],{unique:true});\n\nRelationships between entities are defined using the constructor\nfunction\'s `hasMany` call:\n\n    // This defines a one-to-many relationship:\n    Category.hasMany(\'tasks\', Task, \'category\');\n    // These two definitions define a many-to-many relationship\n    Task.hasMany(\'tags\', Tag, \'tasks\');\n    Tag.hasMany(\'tasks\', Task, \'tags\');\n        \nThe first statement defines a `tasks` relationship on category objects\ncontaining a `QueryCollection` (see the section on query collections\nlater) of `Task`s, it also defines an inverse relationship on `Task`\nobjects with the name `category`. The last two statements define a\nmany-to-many relationships between `Task` and `Tag`. `Task` gets a\n`tags` property (a `QueryCollection`) containing all its tags and vice\nversa, `Tag` gets a `tasks` property containing all of its tasks.\n\nThe defined entity definitions are synchronized (activated) with the\ndatabase using a `persistence.schemaSync` call, which takes a callback\nfunction (with a newly created transaction as an argument), that is called\nwhen the schema synchronization has completed, the callback is\noptional.\n\n    persistence.schemaSync();\n    // or\n    persistence.schemaSync(function(tx) { \n      // tx is the transaction object of the transaction that was\n      // automatically started\n    });\n\nThere is also a migrations plugin you can check out, documentation can be found\nin [persistence.migrations.docs.md](migrations/persistence.migrations.docs.md) file.\n\nMix-ins\n-------\n\nYou can also define mix-ins and apply them to entities of the model. \n\nA mix-in definition is similar to an entity definition, except using\n`defineMixin` rather than just `define`. For example:\n\n    var Annotatable = persistence.defineMixin(\'Annotatable\', {\n      lastAnnotated: "DATE"\n    });\n\nYou can define relationships between mix-in and entities. For example:\n\n    // A normal entity\n    var Note = persistence.define(\'Note\', {\n      text: "TEXT"\n    });\n  \n    // relationship between a mix-in and a normal entity\n    Annotatable.hasMany(\'notes\', Note, \'annotated\');\n\nOnce you have defined a mix-in, you can apply it to any entity of your model, \nwith the `Entity.is(mixin)` method. For example:\n\n    Project.is(Annotatable);\n    Task.is(Annotatable);\n    \nNow, your `Project` and `Task` entities have an additional `lastAnnotated` property.\nThey also have a one to many relationship called `notes` to the `Note` entity. \nAnd you can also traverse the reverse relationship from a `Note` to its `annotated` object.\n\nNote that `annotated` is a polymorphic relationship as it may yield either a `Project` \nor a `Task` (or any other entity which is `Annotatable\').\n\nNote: Prefetch is not allowed (yet) on a relationship that targets a mixin. In the example above\nyou cannot prefetch the `annotated` relationship when querying the `Note` entity.\n    \nNotes: this feature is very experimental at this stage. It needs more testing.\n  Support for "is a" relationships (classical inheritance) is also in the works.\n\nCreating and manipulating objects\n---------------------------------\n\nNew objects can be instantiated with the constructor functions.\nOptionally, an object with initial property values can be passed as\nwell, or the properties may be set later:\n\n    var task = new Task();\n    var category = new Category({name: "My category"});\n    category.metaData = {rating: 5};\n    var tag = new Tag();\n    tag.name = "work";\n\nMany-to-one relationships are accessed using their specified name, e.g.:\n    task.category = category;\n\nOne-to-many and many-to-many relationships are access and manipulated\nthrough the `QueryCollection` API that will be discussed later:\n\n    task.tags.add(tag);\n    tasks.tags.remove(tag)l\n    tasks.tags.list(tx, function(allTags) { console.log(allTags); });\n\nPersisting/removing objects\n---------------------------\n\nSimilar to [hibernate](http://www.hibernate.org), `persistence.js`\nuses a tracking mechanism to determine which objects\' changes have to\nbe persisted to the datase. All objects retrieved from the database\nare automatically tracked for changes. New entities can be tracked to\nbe persisted using the `persistence.add` function:\n        \n    var c = new Category({name: "Main category"});\n    persistence.add(c);\n    for ( var i = 0; i < 5; i++) {\n      var t = new Task();\n      t.name = \'Task \' + i;\n      t.done = i % 2 == 0;\n      t.category = c;\n      persistence.add(t);\n    }\n\nObjects can also be removed from the database:\n\n    persistence.remove(c);\n\nAll changes made to tracked objects can be flushed to the database by\nusing `persistence.flush`, which takes a transaction object and\ncallback function as arguments. A new transaction can be started using\n`persistence.transaction`:\n    \n    persistence.transaction(function(tx) {\n      persistence.flush(tx, function() {\n        alert(\'Done flushing!\');\n      });\n    });\n\nFor convenience, it is also possible to not specify a transaction or\ncallback, in that case a new transaction will be started\nautomatically. For instance:\n\n    persistence.flush();\n    // or, with callback\n    persistence.flush(function() {\n      alert(\'Done flushing\');\n    });\n\nNote that when no callback is defined, the flushing still happens\nasynchronously.\n\n__Important__: Changes and new objects will not be persisted until you\nexplicitly call `persistence.flush()`. The exception to this rule is\nusing the `list(...)` method on a database `QueryCollection`, which also\nflushes first, although this behavior may change in the future. \n\nDumping and restoring data\n--------------------------\n\nThe library supports two kinds of dumping and restoring data.\n\n`persistence.dump` can be used to create an object containing a full\ndump of a database. Naturally, it is adviced to only do this with\nsmaller databases. Example:\n\n    persistence.dump(tx, [Task, Category], function(dump) {\n      console.log(dump);\n    });\n\nThe `tx` is left out, a new transaction will be started for the\noperation. If the second argument is left out, `dump` defaults\nto dumping _all_ defined entities.\n\nThe dump format is:\n    \n    {"entity-name": [list of instances],\n     ...}\n\n`persistence.load` is used to restore the dump produced by\n`persistence.dump`. Usage:\n\n    persistence.load(tx, dumpObj, function() {\n      alert(\'Dump restored!\');\n    });\n\nThe `tx` argument can be left out to automatically start a new\ntransaction. Note that `persistence.load` does not empty the database\nfirst, it simply attempts to add all objects to the database. If\nobjects with, e.g. the same ID already exist, this will fail.\n\nSimilarly, `persistence.loadFromJson` and `persistence.dumpToJson`\nrespectively load and dump all the database\'s data as JSON strings.\n\nEntity constructor functions\n----------------------------\n\nThe constructor function returned by a `persistence.define` call\ncannot only be used to instantiate new objects, it also has some\nuseful methods of its own:\n\n* `EntityName.all([session])` returns a query collection containing\nall\n  persisted instances of that object. The `session` argument is\n  optional and only required when `persistence.js` is used in\n  multi-session mode.\n* `EntityName.load([session], [tx], id, callback)` loads an particular\n  object from the database by id or returns `null` if it has not been\n  found.\n* `EntityName.findBy([session], [tx], property, value, callback)` searches\n  for a particular object based on a property value (this is assumed to\n  be unique), the callback function is called with the found object or\n  `null` if it has not been found.\n* `EntityName.index([col1, col2, ..., colN], options)` creates an index on a column\n  of a combination of columns, for faster searching. If options.unique is true,\n  the index will impose a unique constraint on the values of the columns.\n\nAnd of course the methods to define relationships to other entities:\n\n* `EntityName.hasMany(property, Entity, inverseProperty)` defines a\n  1:N or N:M relationship (depending on the inverse property)\n* `EntityName.hasOne(property, Entity)` defines a 1:1 or N:1\n  relationship\n\n\nEntity objects\n--------------\n\nEntity instances also have a few predefined properties and methods you\nshould be aware of:\n\n* `obj.id`, contains the identifier of your entity, this is a\n  automatically generated (approximation of a) UUID. You should\n  never write to this property.\n* `obj.fetch(prop, callback)`, if an object has a `hasOne`\n   relationship to another which has not yet been fetched from the\n   database (e.g. when `prefetch` wasn\'t used), you can fetch in manually\n   using `fetch`. When the property object is retrieved the callback function\n   is invoked with the result, the result is also cached in the entity\n   object itself.\n* `obj.selectJSON([tx], propertySpec, callback)`, sometime you need to extract\n  a subset of data from an entity. You for instance need to post a\n  JSON representation of your entity, but do not want to include all\n  properties. `selectJSON` allows you to do that. The `propertySpec`\n  arguments expects an array with property names. Some examples:\n   * `[\'id\', \'name\']`, will return an object with the id and name property of this entity\n   * `[\'*\']`, will return an object with all the properties of this entity, not recursive\n   * `[\'project.name\']`, will return an object with a project property which has a name \n     property containing the project name (hasOne relationship)\n   * `[\'project.[id, name]\']`, will return an object with a project property which has an\n     id and name property containing the project name (hasOne relationship)\n   * `[\'tags.name\']`, will return an object with an array `tags` property containing \n     objects each with a single property: name\n       \n\nQuery collections\n-----------------\n\nA core concept of `persistence.js` is the `QueryCollection`. A\n`QueryCollection` represents a (sometimes) virtual collection that can\nbe filtered, ordered or paginated. `QueryCollection`s are somewhate\ninspired by [Google AppEngine\'s Query\nclass](http://code.google.com/appengine/docs/python/datastore/queryclass.html).\nA `QueryCollection` has the following methods:\n\n* `filter(property, operator, value)`  \n  Returns a new `QueryCollection` that adds a filter, filtering a\n  certain property based on an operator and value. Supported operators\n  are \'=\', \'!=\', \'<\', \'<=\', \'>\', \'>=\', \'in\' and \'not in\'. Example:\n  `.filter(\'done\', \'=\', true)`\n* `or(filter)`  \n  Returns a new `QueryCollection` that contains items either matching\n  the filters specified before calling `or`, or the filter represented\n  in the argument. The `filter` argument is of a `Filter` type, there\n  are three types of filters:\n  - `persistence.PropertyFilter`, which filters on properties (internally called when `filter(...)` is used.  \n    Example: `new persistence.PropertyFilter(\'done\', \'=\', true)`\n  - `persistence.AndFilter`, which is passed two filter objects as arguments, both of which should be true.\n    Example: `new persistence.AndFilter(new persistence.PropertyFilter(\'done\', \'=\', true), new persistence.PropertyFilter(\'archived\', \'=\', true))`\n  - `persistence.OrFilter`, which is passed two filter objects as arguments, one of which should be true.\n    Example: `new persistence.OrFilter(new persistence.PropertyFilter(\'done\', \'=\', true), new persistence.PropertyFilter(\'archived\', \'=\', true))`\n* `and(filter)`  \n  same as `or(filter)` except that both conditions should hold for items to be in the collection. \n* `order(property, ascending)`  \n  Returns a new `QueryCollection` that will order its results by the\n  property specified in either an ascending (ascending === true) or\n  descending (ascending === false) order.\n* `limit(n)`  \n  Returns a new `QueryCollection` that limits the size of the result\n  set to `n` items. Useful for pagination.\n* `skip(n)`  \n  Returns a new `QueryCollection` that skips the first `n` results.\n  Useful for pagination.\n* `prefetch(rel)`  \n  Returns a new `QueryCollection` that prefetches entities linked\n  through relationship `rel`, note that this only works for one-to-one\n  and many-to-one relationships.\n* `add(obj)`  \n  Adds object `obj` to the collection.\n* `remove(obj)`  \n  Removes object `obj` from the collection.\n* `list([tx], callback)`  \n  Asynchronously fetches the results matching the formulated query.\n  Once retrieved, the callback function is invoked with an array of\n  entity objects as argument.\n* `each([tx], eachCallback)`  \n  Asynchronously fetches the results matching the formulated query.\n  Once retrieved, the `eachCallback` function is invoked on each\n  element of the result objects.\n* `forEach([tx], eachCallback)`  \n  Alias for `each`\n* `one([tx], callback)`\n  Asynchronously fetches the first element of the collection, or `null` if none.\n* `destroyAll([tx], callback)`\n  Asynchronously removes all the items in the collection. __Important__: this does\n  not only remove the items from the collection, but removes the items themselves!\n* `count([tx], callback)`\n  Asynchronously counts the number of items in the collection. The arguments passed\n  to the `callback` function is the number of items.\n\nQuery collections are returned by:\n\n* `EntityName.all()`, e.g. `Task.all()`\n* one-to-many and many-to-many relationships, e.g. `task.tags`\n\nExample:\n\n    var allTasks = Task.all().filter("done", \'=\', true).prefetch("category").order("name", false).limit(10);\n        \n    allTasks.list(null, function (results) {\n        results.forEach(function (r) {\n            console.log(r.name)\n            window.task = r;\n        });\n    });\n\nUsing persistence.js on the server\n==================================\n\nInstalling `persistence.js` on node is easy using [npm](http://npmjs.org):\n\n    npm install persistencejs\n\nSadly the node.js server environment requires slight changes to\n`persistence.js` to make it work with multiple database connections:\n\n* A `Session` object needs to be passed as an extra argument to\n  certain method calls, typically as a first argument.\n* Methods previously called on the `persistence` object itself are now\n  called on the `Session` object.\n\nAn example `node.js` application is included in `test/node-blog.js`. \n\nSetup\n-----\nYou need to `require` two modules, the `persistence.js` library itself\nand the MySQL backend module.\n\n    var persistence = require(\'persistencejs/persistence\').persistence;\n    var persistenceStore = require(\'persistencejs/persistence.store.mysql\');\n\nThen, you configure the database settings to use:\n\n    persistenceStore.config(persistence, \'localhost\', 3306, \'dbname\', \'username\', \'password\');\n\nSubsequently, for every connection you handle (assuming you\'re\nbuilding a sever), you call the `persistenceStore.getSession()`\nmethod:\n\n    var session = persistenceStore.getSession();\n\nThis session is what you pass around, typically together with a\ntransaction object. Note that currently you can only have one\ntransaction open per session and transactions cannot be nested.\n\n    session.transaction(function(tx) {\n      ...\n    });\n\nCommit and Rollback\n-------------------\n\n`persistence.js` works in autocommit mode by default. \n\nYou can override this behavior and enable explicit commit and rollback \nby passing true as first argument to `persistence.transaction`. \nYou can then use the following two methods to control the transaction:\n\n* `transaction.commit(session, callback)` commits the changes.\n* `transaction.rollback(session, callback)` rollbacks the changes.\n\nTypical code will look like:\n \n    session.transaction(true, function(tx) {\n      // create/update/delete objects\n      modifyThings(session, tx, function(err, result) {\n        if (err) {\n          // something went wrong\n          tx.rollback(session, function() {\n            console.log(\'changes have been rolled back: \' + ex.message);\n          });\n        }\n        else {\n          // success\n          tx.commit(session, function() {\n            console.log(\'changes have been committed: \' result);\n        });\n      });\n    });\n\nExplicit commit and rollback is only supported on MySQL (server side) \nfor now.\n\nDefining your data model\n------------------------\n\nDefining your data model is done in exactly the same way as regular `persistence.js`:\n\n    var Task = persistence.define(\'Task\', {\n      name: "TEXT",\n      description: "TEXT",\n      done: "BOOL"\n    });\n\nA `schemaSync` is typically performed as follows:\n\n    session.schemaSync(tx, function() {\n      ...\n    });\n\nCreating and manipulating objects\n---------------------------------\n\nCreating and manipulating objects is done much the same way as with\nregular `persistence.js`, except that in the entity\'s constructor you\nneed to reference the `Session` again:\n\n    var t = new Task(session);\n    ...\n    session.add(t);\n\n    session.flush(tx, function() {\n      ...\n    });\n\nQuery collections\n-----------------\n\nQuery collections work the same way as in regular `persistence.js`\nwith the exception of the `Entity.all()` method that now also requires\na `Session` to be passed to it:\n\n    Task.all(session).filter(\'done\', \'=\', true).list(tx, function(tasks) {\n      ...\n    });\n\nClosing the session\n-------------------\n\nAfter usage, you need to close your session:\n\n    session.close();\n\nBugs and Contributions\n======================\n\nIf you find a bug, please [report\nit](https://github.com/zefhemel/persistencejs/issues).  or fork the\nproject, fix the problem and send me a pull request. For a list of\nplanned features and open issues, have a look at the [issue\ntracker](https://github.com/zefhemel/persistencejs/issues).\n\nFor support and discussion, please join the [persistence.js Google\nGroup](http://groups.google.com/group/persistencejs).\n\nThanks goes to the people listed in `AUTHORS` for their contributions.\n\nIf you use [GWT](http://code.google.com/webtoolkit/) (the Google Web\nToolkit), be sure to have a look at [Dennis Z. Jiang\'s GWT persistence.js\nwrapper](http://github.com/dennisjzh/GwtMobile-Persistence)\n\nLicense\n=======\n\nThis work is licensed under the [MIT license](http://en.wikipedia.org/wiki/MIT_License).\n\nSupport this work\n-----------------\n\nYou can support this project by flattering it:\n\n<a href="http://flattr.com/thing/2510/persistence-js" target="_blank">\n<img src="http://api.flattr.com/button/button-static-50x60.png" title="Flattr this" border="0" /></a>\n',
37 silly resolved     _id: 'persistencejs@0.2.5',
37 silly resolved     description: 'persistence.js ============== `persistence.js` is a asynchronous Javascript object-relational mapper library. It can be used both in the web browser and on the server using [node.js](http://nodejs.org). It currently supports 4 types of data stores:',
37 silly resolved     _from: 'persistencejs' } ]
38 info install persistencejs@0.2.5 into /Users/czarft
39 info installOne persistencejs@0.2.5
40 verbose from cache /Users/czarft/.npm/persistencejs/0.2.5/package/package.json
41 info /Users/czarft/node_modules/persistencejs unbuild
42 verbose read json /Users/czarft/node_modules/persistencejs/package.json
43 verbose tar unpack /Users/czarft/.npm/persistencejs/0.2.5/package.tgz
44 silly lockFile ccc8e74f-zarft-node-modules-persistencejs /Users/czarft/node_modules/persistencejs
45 verbose lock /Users/czarft/node_modules/persistencejs /Users/czarft/.npm/ccc8e74f-zarft-node-modules-persistencejs.lock
46 silly gunzTarPerm modes [ '755', '644' ]
47 silly gunzTarPerm extractEntry package.json
48 silly gunzTarPerm extractEntry README.md
49 silly gunzTarPerm extractEntry indexeddb.js
50 silly gunzTarPerm extractEntry copy.js
51 silly gunzTarPerm extractEntry persistence.min.js
52 silly gunzTarPerm extractEntry docs/DEVELOPMENT.md
53 silly gunzTarPerm extractEntry docs/jquery.md
54 silly gunzTarPerm extractEntry docs/jquery.mobile.md
55 silly gunzTarPerm extractEntry docs/migrations.md
56 silly gunzTarPerm extractEntry docs/search.md
57 silly gunzTarPerm extractEntry docs/sync.md
58 silly gunzTarPerm extractEntry indexeddb.html
59 silly gunzTarPerm extractEntry AUTHORS
60 silly gunzTarPerm extractEntry lib/persistence.browser.c.js
61 silly gunzTarPerm extractEntry lib/persistence.js
62 silly gunzTarPerm extractEntry lib/persistence.migrations.js
63 silly gunzTarPerm extractEntry lib/persistence.pool.js
64 silly gunzTarPerm extractEntry lib/persistence.search.js
65 silly gunzTarPerm extractEntry lib/persistence.jquery.mobile.js
66 silly gunzTarPerm extractEntry lib/persistence.store.config.js
67 silly gunzTarPerm extractEntry lib/persistence.store.memory.js
68 silly gunzTarPerm extractEntry lib/persistence.store.mysql.js
69 silly gunzTarPerm extractEntry lib/persistence.store.sql.js
70 silly gunzTarPerm extractEntry lib/persistence.store.sqlite.js
71 silly gunzTarPerm extractEntry lib/persistence.jquery.js
72 silly gunzTarPerm extractEntry lib/persistence.store.websql.js
73 silly gunzTarPerm extractEntry lib/persistence.browser.u.js
74 silly gunzTarPerm extractEntry lib/persistence.sync.js
75 silly gunzTarPerm extractEntry lib/persistence.browser.js
76 silly gunzTarPerm extractEntry lib/persistence.sync.server.js
77 silly gunzTarPerm extractEntry lib/persistence.store.appengine.js
78 silly gunzTarPerm extractEntry npm-18288/package.json
79 silly gunzTarPerm extractEntry npm-18288/.npmignore
80 silly gunzTarPerm extractEntry npm-18288/README.md
81 silly gunzTarPerm extractEntry npm-18288/LICENSE
82 silly gunzTarPerm extractEntry npm-18288/cli.js
83 silly gunzTarPerm extractEntry npm-18288/npm.js
84 silly gunzTarPerm extractEntry npm-18288/doc/npm.md
85 silly gunzTarPerm extractEntry npm-18288/doc/activate.md
86 silly gunzTarPerm extractEntry npm-18288/doc/build.md
87 silly gunzTarPerm extractEntry npm-18288/doc/bundle.md
88 silly gunzTarPerm extractEntry npm-18288/doc/cache.md
89 silly gunzTarPerm extractEntry npm-18288/doc/coding-style.md
90 silly gunzTarPerm extractEntry npm-18288/doc/config.md
91 silly gunzTarPerm extractEntry npm-18288/doc/deactivate.md
92 silly gunzTarPerm extractEntry npm-18288/doc/developers.md
93 silly gunzTarPerm extractEntry npm-18288/doc/folders.md
94 silly gunzTarPerm extractEntry npm-18288/doc/future-ideas/deploy.md
95 silly gunzTarPerm extractEntry npm-18288/doc/future-ideas/remote.md
96 silly gunzTarPerm extractEntry npm-18288/doc/future-ideas/site.md
97 silly gunzTarPerm extractEntry npm-18288/doc/install.md
98 silly gunzTarPerm extractEntry npm-18288/doc/json.md
99 silly gunzTarPerm extractEntry npm-18288/doc/link.md
100 silly gunzTarPerm extractEntry npm-18288/doc/list.md
101 silly gunzTarPerm extractEntry npm-18288/doc/adduser.md
102 silly gunzTarPerm extractEntry npm-18288/doc/outdated.md
103 silly gunzTarPerm extractEntry npm-18288/doc/owner.md
104 silly gunzTarPerm extractEntry npm-18288/doc/publish.md
105 silly gunzTarPerm extractEntry npm-18288/doc/rebuild.md
106 silly gunzTarPerm extractEntry npm-18288/doc/restart.md
107 silly gunzTarPerm extractEntry npm-18288/doc/scripts.md
108 silly gunzTarPerm extractEntry npm-18288/doc/start.md
109 silly gunzTarPerm extractEntry npm-18288/doc/stop.md
110 silly gunzTarPerm extractEntry npm-18288/doc/tag.md
111 silly gunzTarPerm extractEntry npm-18288/doc/test.md
112 silly gunzTarPerm extractEntry npm-18288/doc/uninstall.md
113 silly gunzTarPerm extractEntry npm-18288/doc/unpublish.md
114 silly gunzTarPerm extractEntry npm-18288/doc/update.md
115 silly gunzTarPerm extractEntry npm-18288/doc/view.md
116 silly gunzTarPerm extractEntry npm-18288/man1/ls.1
117 silly gunzTarPerm extractEntry npm-18288/man1/activate.1
118 silly gunzTarPerm extractEntry npm-18288/man1/build.1
119 silly gunzTarPerm extractEntry npm-18288/man1/bundle.1
120 silly gunzTarPerm extractEntry npm-18288/man1/cache.1
121 silly gunzTarPerm extractEntry npm-18288/man1/coding-style.1
122 silly gunzTarPerm extractEntry npm-18288/man1/config.1
123 silly gunzTarPerm extractEntry npm-18288/man1/deactivate.1
124 silly gunzTarPerm extractEntry npm-18288/man1/developers.1
125 silly gunzTarPerm extractEntry npm-18288/man1/folders.1
126 silly gunzTarPerm extractEntry npm-18288/man1/future-ideas/deploy.1
127 silly gunzTarPerm extractEntry npm-18288/man1/future-ideas/remote.1
128 silly gunzTarPerm extractEntry npm-18288/man1/future-ideas/site.1
129 silly gunzTarPerm extractEntry npm-18288/man1/install.1
130 silly gunzTarPerm extractEntry npm-18288/man1/json.1
131 silly gunzTarPerm extractEntry npm-18288/man1/link.1
132 silly gunzTarPerm extractEntry npm-18288/man1/list.1
133 silly gunzTarPerm extractEntry npm-18288/man1/ln.1
134 silly gunzTarPerm extractEntry npm-18288/man1/adduser.1
135 silly gunzTarPerm extractEntry npm-18288/man1/npm.1
136 silly gunzTarPerm extractEntry npm-18288/man1/outdated.1
137 silly gunzTarPerm extractEntry npm-18288/man1/owner.1
138 silly gunzTarPerm extractEntry npm-18288/man1/publish.1
139 silly gunzTarPerm extractEntry npm-18288/man1/rebuild.1
140 silly gunzTarPerm extractEntry npm-18288/man1/restart.1
141 silly gunzTarPerm extractEntry npm-18288/man1/rm.1
142 silly gunzTarPerm extractEntry npm-18288/man1/scripts.1
143 silly gunzTarPerm extractEntry npm-18288/man1/start.1
144 silly gunzTarPerm extractEntry npm-18288/man1/stop.1
145 silly gunzTarPerm extractEntry npm-18288/man1/tag.1
146 silly gunzTarPerm extractEntry npm-18288/man1/test.1
147 silly gunzTarPerm extractEntry npm-18288/man1/uninstall.1
148 silly gunzTarPerm extractEntry npm-18288/man1/unpublish.1
149 silly gunzTarPerm extractEntry npm-18288/man1/update.1
150 silly gunzTarPerm extractEntry npm-18288/man1/view.1
151 silly gunzTarPerm extractEntry npm-18288/html/index.html
152 silly gunzTarPerm extractEntry npm-18288/html/npm-fin.png
153 silly gunzTarPerm extractEntry npm-18288/html/npm-large.png
154 silly gunzTarPerm extractEntry npm-18288/html/npm.png
155 silly gunzTarPerm extractEntry npm-18288/lib/activate.js
156 silly gunzTarPerm extractEntry npm-18288/lib/link.js
157 silly gunzTarPerm extractEntry npm-18288/lib/ls.js
158 silly gunzTarPerm extractEntry npm-18288/lib/outdated.js
159 silly gunzTarPerm extractEntry npm-18288/lib/install.js
160 silly gunzTarPerm extractEntry npm-18288/lib/adduser.js
161 silly gunzTarPerm extractEntry npm-18288/lib/rebuild.js
162 silly gunzTarPerm extractEntry npm-18288/lib/repl.js
163 silly gunzTarPerm extractEntry npm-18288/lib/restart.js
164 silly gunzTarPerm extractEntry npm-18288/lib/start.js
165 silly gunzTarPerm extractEntry npm-18288/lib/help.js
166 silly gunzTarPerm extractEntry npm-18288/lib/stop.js
167 silly gunzTarPerm extractEntry npm-18288/lib/deactivate.js
168 silly gunzTarPerm extractEntry npm-18288/lib/tag.js
169 silly gunzTarPerm extractEntry npm-18288/lib/config.js
170 silly gunzTarPerm extractEntry npm-18288/lib/test.js
171 silly gunzTarPerm extractEntry npm-18288/lib/cache.js
172 silly gunzTarPerm extractEntry npm-18288/lib/uninstall.js
173 silly gunzTarPerm extractEntry npm-18288/lib/bundle.js
174 silly gunzTarPerm extractEntry npm-18288/lib/unpublish.js
175 silly gunzTarPerm extractEntry npm-18288/lib/build.js
176 silly gunzTarPerm extractEntry npm-18288/lib/update-dependents.js
177 silly gunzTarPerm extractEntry npm-18288/lib/autoremove.js
178 silly gunzTarPerm extractEntry npm-18288/lib/update.js
179 silly gunzTarPerm extractEntry npm-18288/lib/owner.js
180 silly gunzTarPerm extractEntry npm-18288/lib/view.js
181 silly gunzTarPerm extractEntry npm-18288/lib/publish.js
182 silly gunzTarPerm extractEntry npm-18288/lib/utils/async-map.js
183 silly gunzTarPerm extractEntry npm-18288/lib/utils/ini-parser.js
184 silly gunzTarPerm extractEntry npm-18288/lib/utils/ini.js
185 silly gunzTarPerm extractEntry npm-18288/lib/utils/lifecycle.js
186 silly gunzTarPerm extractEntry npm-18288/lib/utils/graceful-fs.js
187 silly gunzTarPerm extractEntry npm-18288/lib/utils/base64.js
188 silly gunzTarPerm extractEntry npm-18288/lib/utils/log.js
189 silly gunzTarPerm extractEntry npm-18288/lib/utils/mkdir-p.js
190 silly gunzTarPerm extractEntry npm-18288/lib/utils/promise-chain.js
191 silly gunzTarPerm extractEntry npm-18288/lib/utils/prompt.js
192 silly gunzTarPerm extractEntry npm-18288/lib/utils/get.js
193 silly gunzTarPerm extractEntry npm-18288/lib/utils/proto-list.js
194 silly gunzTarPerm extractEntry npm-18288/lib/utils/find.js
195 silly gunzTarPerm extractEntry npm-18288/lib/utils/read-installed.js
196 silly gunzTarPerm extractEntry npm-18288/lib/utils/fetch.js
197 silly gunzTarPerm extractEntry npm-18288/lib/utils/read-json.js
198 silly gunzTarPerm extractEntry npm-18288/lib/utils/exec.js
199 silly gunzTarPerm extractEntry npm-18288/lib/utils/set.js
200 silly gunzTarPerm extractEntry npm-18288/lib/utils/error-handler.js
201 silly gunzTarPerm extractEntry npm-18288/lib/utils/registry.js
202 silly gunzTarPerm extractEntry npm-18288/lib/utils/uuid.js
203 silly gunzTarPerm extractEntry npm-18288/lib/utils/relativize.js
204 silly gunzTarPerm extractEntry npm-18288/lib/utils/default-config.js
205 silly gunzTarPerm extractEntry npm-18288/lib/utils/rm-rf.js
206 silly gunzTarPerm extractEntry npm-18288/lib/utils/chain.js
207 silly gunzTarPerm extractEntry npm-18288/lib/utils/semver.js
208 silly gunzTarPerm extractEntry npm-18288/lib/utils/link.js
209 silly gunzTarPerm extractEntry npm-18288/lib/utils/write-shim.js
210 silly gunzTarPerm extractEntry npm-18288/lib/utils/load-package-defaults.js
211 silly gunzTarPerm extractEntry npm-18288/lib/utils/registry/adduser.js
212 silly gunzTarPerm extractEntry npm-18288/lib/utils/registry/get.js
213 silly gunzTarPerm extractEntry npm-18288/lib/utils/registry/publish.js
214 silly gunzTarPerm extractEntry npm-18288/lib/utils/registry/request.js
215 silly gunzTarPerm extractEntry npm-18288/lib/utils/registry/tag.js
216 silly gunzTarPerm extractEntry npm-18288/lib/utils/registry/unpublish.js
217 silly gunzTarPerm extractEntry npm-18288/lib/utils/default.npmignore
218 silly gunzTarPerm extractEntry npm-18288/test/common.js
219 silly gunzTarPerm extractEntry npm-18288/test/disabled/failer/package.json
220 silly gunzTarPerm extractEntry npm-18288/test/disabled/fast/package.json
221 silly gunzTarPerm extractEntry npm-18288/test/disabled/slow/package.json
222 silly gunzTarPerm extractEntry npm-18288/test/packages/bindir/package.json
223 silly gunzTarPerm extractEntry npm-18288/test/packages/bindir/test.js
224 silly gunzTarPerm extractEntry npm-18288/test/packages/bindir/bin/prog.js
225 silly gunzTarPerm extractEntry npm-18288/test/packages/blerg/package.json
226 silly gunzTarPerm extractEntry npm-18288/test/packages/blerg/test.js
227 silly gunzTarPerm extractEntry npm-18288/test/packages/bundletest/package.json
228 silly gunzTarPerm extractEntry npm-18288/test/packages/depends-on-jsdom/package.json
229 silly gunzTarPerm extractEntry npm-18288/test/packages/test-package/package.json
230 silly gunzTarPerm extractEntry npm-18288/test/run.sh
231 silly gunzTarPerm extractEntry npm-18288/test/update-test.sh
232 silly gunzTarPerm extractEntry npm-18288/scripts/install.sh
233 silly gunzTarPerm extractEntry npm-18288/Makefile
234 silly gunzTarPerm extractEntry CHANGES
235 silly gunzTarPerm extractEntry .settings.xml
236 silly gunzTarPerm extractEntry demo/jquerymobile/README.md
237 silly gunzTarPerm extractEntry demo/jquerymobile/assets/ipad-palm.png
238 silly gunzTarPerm extractEntry demo/jquerymobile/assets/jqm-sitebg.png
239 silly gunzTarPerm extractEntry demo/jquerymobile/assets/jquery-logo.png
240 silly gunzTarPerm extractEntry demo/jquerymobile/assets/version.png
241 silly gunzTarPerm extractEntry demo/jquerymobile/docs/text.html
242 silly gunzTarPerm extractEntry demo/jquerymobile/docs/text_and_images.html
243 silly gunzTarPerm extractEntry demo/jquerymobile/index.html
244 silly gunzTarPerm extractEntry demo/jquerymobile/order/form-fake-response.html
245 silly gunzTarPerm extractEntry test/appengine/eventloop.js
246 silly gunzTarPerm extractEntry test/appengine/test.js
247 silly gunzTarPerm extractEntry test/appengine/testev.js
248 silly gunzTarPerm extractEntry test/browser/util.js
249 silly gunzTarPerm extractEntry test/browser/test.jquery-persistence.js
250 silly gunzTarPerm extractEntry test/browser/test.migrations.js
251 silly gunzTarPerm extractEntry test/browser/test.mixin.js
252 silly gunzTarPerm extractEntry test/browser/tasks.client.js
253 silly gunzTarPerm extractEntry test/browser/test.persistence.js
254 silly gunzTarPerm extractEntry test/browser/test.search.js
255 silly gunzTarPerm extractEntry test/browser/test.sync.js
256 silly gunzTarPerm extractEntry test/browser/test.uki-persistence.js
257 silly gunzTarPerm extractEntry test/browser/qunit/jquery.js
258 silly gunzTarPerm extractEntry test/browser/qunit/qunit.js
259 silly gunzTarPerm extractEntry test/browser/qunit/qunit.css
260 silly gunzTarPerm extractEntry test/browser/test.migrations.html
261 silly gunzTarPerm extractEntry test/browser/test.search.html
262 silly gunzTarPerm extractEntry test/browser/tasks.html
263 silly gunzTarPerm extractEntry test/browser/test.sync.html
264 silly gunzTarPerm extractEntry test/browser/test.mixin.html
265 silly gunzTarPerm extractEntry test/browser/test.uki-persistence.html
266 silly gunzTarPerm extractEntry test/browser/test.jquery-persistence.html
267 silly gunzTarPerm extractEntry test/browser/uki/uki-persistence.js
268 silly gunzTarPerm extractEntry test/browser/test.persistence.html
269 silly gunzTarPerm extractEntry test/node/node-blog.js
270 silly gunzTarPerm extractEntry test/node/test.error.handling.js
271 silly gunzTarPerm extractEntry test/node/test.memory.store.js
272 silly gunzTarPerm extractEntry test/node/test.sqlite.store.js
273 silly gunzTarPerm extractEntry test/node/test.store.config.js
274 silly gunzTarPerm extractEntry test/node/test.sync.server.js
275 verbose read json /Users/czarft/node_modules/persistencejs/package.json
276 silly lockFile ccc8e74f-zarft-node-modules-persistencejs /Users/czarft/node_modules/persistencejs
277 info preinstall persistencejs@0.2.5
278 verbose from cache /Users/czarft/node_modules/persistencejs/package.json
279 verbose readDependencies using package.json deps
280 verbose from cache /Users/czarft/node_modules/persistencejs/package.json
281 verbose readDependencies using package.json deps
282 verbose cache add [ 'mysql@>=0.7.0', null ]
283 silly cache add name=undefined spec="mysql@>=0.7.0" args=["mysql@>=0.7.0",null]
284 verbose parsed url { pathname: 'mysql@%3E=0.7.0',
284 verbose parsed url   path: 'mysql@%3E=0.7.0',
284 verbose parsed url   href: 'mysql@%3E=0.7.0' }
285 silly cache add name="mysql" spec=">=0.7.0" args=["mysql",">=0.7.0"]
286 verbose parsed url { pathname: '%3E=0.7.0', path: '%3E=0.7.0', href: '%3E=0.7.0' }
287 verbose addNamed [ 'mysql', '>=0.7.0' ]
288 verbose addNamed [ null, '>=0.7.0' ]
289 silly lockFile 44646703-mysql-0-7-0 mysql@>=0.7.0
290 verbose lock mysql@>=0.7.0 /Users/czarft/.npm/44646703-mysql-0-7-0.lock
291 verbose cache add [ 'sqlite@>=1.0.2', null ]
292 silly cache add name=undefined spec="sqlite@>=1.0.2" args=["sqlite@>=1.0.2",null]
293 verbose parsed url { pathname: 'sqlite@%3E=1.0.2',
293 verbose parsed url   path: 'sqlite@%3E=1.0.2',
293 verbose parsed url   href: 'sqlite@%3E=1.0.2' }
294 silly cache add name="sqlite" spec=">=1.0.2" args=["sqlite",">=1.0.2"]
295 verbose parsed url { pathname: '%3E=1.0.2', path: '%3E=1.0.2', href: '%3E=1.0.2' }
296 verbose addNamed [ 'sqlite', '>=1.0.2' ]
297 verbose addNamed [ null, '>=1.0.2' ]
298 silly lockFile 0151768b-sqlite-1-0-2 sqlite@>=1.0.2
299 verbose lock sqlite@>=1.0.2 /Users/czarft/.npm/0151768b-sqlite-1-0-2.lock
300 silly addNameRange { name: 'mysql', range: '>=0.7.0', hasData: false }
301 silly addNameRange { name: 'sqlite', range: '>=1.0.2', hasData: false }
302 verbose url raw mysql
303 verbose url resolving [ 'https://registry.npmjs.org/', './mysql' ]
304 verbose url resolved https://registry.npmjs.org/mysql
305 info trying registry request attempt 1 at 18:30:04
306 verbose etag "AQVW4XH0AY6YC61WLK2TD8SLJ"
307 http GET https://registry.npmjs.org/mysql
308 verbose url raw sqlite
309 verbose url resolving [ 'https://registry.npmjs.org/', './sqlite' ]
310 verbose url resolved https://registry.npmjs.org/sqlite
311 info trying registry request attempt 1 at 18:30:04
312 verbose etag "9MLYVRZF076J9U63U4VLZFG9C"
313 http GET https://registry.npmjs.org/sqlite
314 http 304 https://registry.npmjs.org/sqlite
315 silly registry.get cb [ 304,
315 silly registry.get   { server: 'CouchDB/1.2.0 (Erlang OTP/R15B)',
315 silly registry.get     etag: '"9MLYVRZF076J9U63U4VLZFG9C"',
315 silly registry.get     date: 'Fri, 05 Oct 2012 11:30:08 GMT',
315 silly registry.get     'content-length': '0' } ]
316 verbose etag sqlite from cache
317 silly addNameRange number 2 { name: 'sqlite', range: '>=1.0.2', hasData: true }
318 silly addNameRange versions [ 'sqlite', [ '1.0.2', '1.0.3', '1.0.4' ] ]
319 verbose addNamed [ 'sqlite', '1.0.4' ]
320 verbose addNamed [ '1.0.4', '1.0.4' ]
321 silly lockFile f07a2cfe-sqlite-1-0-4 sqlite@1.0.4
322 verbose lock sqlite@1.0.4 /Users/czarft/.npm/f07a2cfe-sqlite-1-0-4.lock
323 verbose read json /Users/czarft/.npm/sqlite/1.0.4/package/package.json
324 silly lockFile f07a2cfe-sqlite-1-0-4 sqlite@1.0.4
325 silly lockFile 0151768b-sqlite-1-0-2 sqlite@>=1.0.2
326 http 304 https://registry.npmjs.org/mysql
327 silly registry.get cb [ 304,
327 silly registry.get   { server: 'CouchDB/1.2.0 (Erlang OTP/R15B)',
327 silly registry.get     etag: '"AQVW4XH0AY6YC61WLK2TD8SLJ"',
327 silly registry.get     date: 'Fri, 05 Oct 2012 11:30:08 GMT',
327 silly registry.get     'content-length': '0' } ]
328 verbose etag mysql from cache
329 silly addNameRange number 2 { name: 'mysql', range: '>=0.7.0', hasData: true }
330 silly addNameRange versions [ 'mysql',
330 silly addNameRange   [ '0.1.0',
330 silly addNameRange     '0.2.0',
330 silly addNameRange     '0.3.0',
330 silly addNameRange     '0.4.0',
330 silly addNameRange     '0.5.0',
330 silly addNameRange     '0.6.0',
330 silly addNameRange     '0.7.0',
330 silly addNameRange     '0.8.0',
330 silly addNameRange     '0.9.0',
330 silly addNameRange     '0.9.1',
330 silly addNameRange     '0.9.2',
330 silly addNameRange     '0.9.3',
330 silly addNameRange     '0.9.4',
330 silly addNameRange     '0.9.5',
330 silly addNameRange     '0.9.6',
330 silly addNameRange     '2.0.0-alpha',
330 silly addNameRange     '2.0.0-alpha2',
330 silly addNameRange     '2.0.0-alpha3' ] ]
331 verbose addNamed [ 'mysql', '0.9.6' ]
332 verbose addNamed [ '0.9.6', '0.9.6' ]
333 silly lockFile b8e87c48-mysql-0-9-6 mysql@0.9.6
334 verbose lock mysql@0.9.6 /Users/czarft/.npm/b8e87c48-mysql-0-9-6.lock
335 verbose read json /Users/czarft/.npm/mysql/0.9.6/package/package.json
336 silly lockFile b8e87c48-mysql-0-9-6 mysql@0.9.6
337 silly lockFile 44646703-mysql-0-7-0 mysql@>=0.7.0
338 silly resolved [ { name: 'sqlite',
338 silly resolved     description: 'SQLite3 bindings for Node',
338 silly resolved     version: '1.0.4',
338 silly resolved     homepage: 'http://github.com/orlandov/node-sqlite',
338 silly resolved     author:
338 silly resolved      { name: 'Orlando Vazquez',
338 silly resolved        email: 'ovazquez@gmail.com',
338 silly resolved        url: 'http://2wycked.net' },
338 silly resolved     contributors: [ [Object], [Object], [Object], [Object] ],
338 silly resolved     repository:
338 silly resolved      { type: 'git',
338 silly resolved        url: 'http://github.com/orlandov/node-sqlite.git' },
338 silly resolved     main: './sqlite',
338 silly resolved     engines: { node: '>=0.2.0' },
338 silly resolved     scripts: { test: './run-tests', preinstall: 'node-waf configure build' },
338 silly resolved     licenses: [ [Object] ],
338 silly resolved     readme: '# NAME\n\nnode-sqlite - Asynchronous SQLite3 driver for Node.js\n\nSQLite calls block, so to work around this, synchronous calls happen within\nNode\'s libeio thread-pool, in a similar manner to how POSIX calls are\ncurrently made.\n\n# SYNOPSIS\n\n## High-level Driver\n\n    var sys    = require(\'sys\'),\n        sqlite = require(\'sqlite\');\n\n    var db = new sqlite.Database();\n\n    // open the database for reading if file exists\n    // create new database file if not\n\n    db.open("aquateen.db", function (error) {\n      if (error) {\n          console.log("Tonight. You."));\n          throw error;\n      }\n      db.execute\n        ( "INSERT INTO aqua_teens (name) VALUES (?)"\n        , [\'meaty meaty moo\']\n        , function (error, rows) {\n            if (error) throw error;\n            console.log("Aqua teen added.");\n          }\n        );\n      var sql = \'SELECT name FROM dudes WHERE type = ? AND age > ?\';\n\n      db.prepare(sql, function (error, statement) {\n        if (error) throw error;\n\n        // Fill in the placeholders\n        statement.bindArray([\'milkshake\', 30], function () {\n\n          statement.fetchAll(function (error, rows) {\n            // ...\n            statement.finalize(function (error) {\n              console.log("All done!");\n            });\n          });\n        });\n      });\n    });\n\n# API\n\n## Database Objects\n\nTo create a new database object:\n    var sqlite = require(\'sqlite\');\n\n    var db = sqlite.Database();\n\n### database.open(filename, function (error) {})\n\nOpen a database handle to the database at the specified filename. If the file\ndoes not exist the bindings will attempt to create it. The callback takes no\narguments.\n\nA filename of ":memory:" may be used to create an in-memory database.\n\n### database.close(function (error) {})\n\nClose the database handle.\n\n### database.execute(sql[, bindings], function (error, rows) {})\n\nExecute a SQL query, `sql` with optional bindings `bindings` on the currently\nopened database. The callback will be executed once with all the rows returned\nfor the query. This is much faster than `database.query` since there are less roundtrips into the thread-pool.\n\n### database.query(sql, [bindings,] function (error, row) {})\n\nExecute a SQL query, `sql`, with optional bindings `bindings` on the currently\nopened database. The callback will be executed once per row returned, plus\nonce more with row set to undefined to indicate end of results.\n\n### database.executeScript(SQL, function (error) {});\n\n    db.executeScript\n      (   "CREATE TABLE table1 (id, name);"\n        + "CREATE TABLE table2 (id, age);"\n        + "INSERT INTO table1 (1, \'Mister Shake\');"\n        + "INSER INTO table2 (1, 34);"\n      , function (error) {\n          if (error) throw error;\n          // ...\n        });\n\nExecute multiple semi-colon separated SQL statements. Statements must take no\nplaceholders. Each statement will be executed with a single step() and then\nreset. This is ideally suited to executing multiple DDL statements.\n\n### database.prepare(SQL, [options,] function (error, statement) {})\n\nCreate a prepared statement from an SQL string. Prepared statements can be\nused used to iterate over results and to avoid compiling SQL each time a query\nis performed.\n\nOptions:\n\n- lastInsertRowID: boolean, default false.\n    If true, when this statement is step()\'d over, the context object (this) in\n    the callback will contain a lastInsertRowID member with the ID of the last\n    inserted row.\n\n- affectedRows: boolean, default false.\n    If true, when this statement is step()\'d over, the context object (this) in\n    the callback will contain an affectedRows member with the number of\n    affected rows for the last step.\n\n## Statement Objects\n\n### statement.bindArray(array, function (error) {})\n\n    statement.bindArray([1, \'robots\', 4.20], callback)\n\nBind array items to place-holder values (? or $foo) in statement.\n\n### statement.bindObject(object, function (error) {})\n\n    statement.bindObject({ $name: \'meatwad\',\n                           $occupation: \'Former detective\' }, callback)\n\nBind object properties to named place-holder values ($foo, $bar, $baz) in\nstatement.\n\n### statement.bind(position, value, function (error) {})\n\n    statement.bind(1, "tango", function (error) {})\n\nBind a value to a place-holder position. Because binding place-holders is done\nby position (not index), the first place-holder is at position 1, second at\nplace-holder position 2, etc.\n\n### statement.clearBindings()\n\nImmediately clear the bindings from the statement. There is no callback.\n\n### statement.step(function (error, row) {})\n\nFetch one row from a prepared statement and hand it off to a callback. If\nthere are no more rows to be fetched, row will be undefined. Rows are\nrepresented as objects with properties named after the respective columns.\n\n### statement.fetchAll(function (error, rows) {})\n\nFetch all rows in statement and pass them to the callback as an array of\nobjects, each object representing one row.\n\n### statement.reset()\n\nImmediately reset a statement object back to it\'s initial state, ready to be\nstep() or fetchAll()\'d again.\n\n### statement.finalize(function (error) {})\n\nFree SQLite objects associated with this statement and mark it for garbage\ncollection.\n\n## Supported Types\n\nAt the moment, the supported types are TEXT, NUMBER, FLOAT and NULL.\n\n# BUILDING\n\nTo obtain and build the bindings:\n\n    git clone http://github.com/orlandov/node-sqlite.git\n    cd node-sqlite\n    node-waf configure build\n\n# TESTS\n\nRunning the unit tests could not be easier. Simply:\n\n    git submodule update --init\n    ./run-tests\n\n# SEE ALSO\n\n* http://sqlite.org/docs.html\n* http://github.com/grumdrig/node-sqlite/\n\n# AUTHORS\n\nOrlando Vazquez [ovazquez@gmail.com]\n\nRyan Dahl [ry@tinyclouds.org]\n\n# THANKS\n\nMany thanks to Eric Fredricksen for his synchronous driver on which this\ndriver was originally based.\n\n* http://github.com/grumdrig/node-sqlite/\n* http://grumdrig.com/node-sqlite/\n\n# LICENSE\n\nnode-sqlite is BSD licensed.\n\n(c) 2010 Orlando Vazquez\n',
338 silly resolved     _id: 'sqlite@1.0.4',
338 silly resolved     _from: 'sqlite@>=1.0.2' },
338 silly resolved   { name: 'mysql',
338 silly resolved     version: '0.9.6',
338 silly resolved     author:
338 silly resolved      { name: 'Felix Geisendörfer',
338 silly resolved        email: 'felix@debuggable.com',
338 silly resolved        url: 'http://debuggable.com/' },
338 silly resolved     description: 'A pure node.js JavaScript Client implementing the MySQL protocol.',
338 silly resolved     homepage: 'https://github.com/felixge/node-mysql',
338 silly resolved     repository: { type: 'git', url: 'git://github.com/felixge/node-mysql.git' },
338 silly resolved     main: './index',
338 silly resolved     scripts: { test: 'make test' },
338 silly resolved     dependencies: { hashish: '0.0.4' },
338 silly resolved     devDependencies: { gently: '0.8.0', urun: '0.0.4', utest: '0.0.3' },
338 silly resolved     engines: { node: '*' },
338 silly resolved     optionalDependencies: {},
338 silly resolved     readme: '# node-mysql\n\n[![Build Status](https://secure.travis-ci.org/felixge/node-mysql.png?branch=master)](http://travis-ci.org/felixge/node-mysql)\n\n## Purpose\n\nA pure node.js JavaScript Client implementing the [MySQL protocol](http://forge.mysql.com/wiki/MySQL_Internals_ClientServer_Protocol).\n\n## Support this module\n\nIf you like this module, check out and spread the word about our service\n[transloadit.com][]. We provide file uploading and encoding functionality to\nother applications, and have performed billions of queries with this module so\nfar.\n\n[transloadit.com]: http://transloadit.com/\n\n## Installation\n\n```\nnpm install mysql\n```\n\n**Important**: If you are upgrading from 0.9.1 or below, there have been\nbackwards incompatible changes in the API. Please read the [upgrading guide][].\n\n[upgrading guide]: https://github.com/felixge/node-mysql/wiki/Upgrading-to-0.9.2+\n\n## Usage\n\n``` javascript\nvar mysql = require(\'mysql\');\nvar TEST_DATABASE = \'nodejs_mysql_test\';\nvar TEST_TABLE = \'test\';\nvar client = mysql.createClient({\n  user: \'root\',\n  password: \'root\',\n});\n\nclient.query(\'CREATE DATABASE \'+TEST_DATABASE, function(err) {\n  if (err && err.number != mysql.ERROR_DB_CREATE_EXISTS) {\n    throw err;\n  }\n});\n\n// If no callback is provided, any errors will be emitted as `\'error\'`\n// events by the client\nclient.query(\'USE \'+TEST_DATABASE);\n\nclient.query(\n  \'CREATE TEMPORARY TABLE \'+TEST_TABLE+\n  \'(id INT(11) AUTO_INCREMENT, \'+\n  \'title VARCHAR(255), \'+\n  \'text TEXT, \'+\n  \'created DATETIME, \'+\n  \'PRIMARY KEY (id))\'\n);\n\nclient.query(\n  \'INSERT INTO \'+TEST_TABLE+\' \'+\n  \'SET title = ?, text = ?, created = ?\',\n  [\'super cool\', \'this is a nice text\', \'2010-08-16 10:00:23\']\n);\n\nvar query = client.query(\n  \'INSERT INTO \'+TEST_TABLE+\' \'+\n  \'SET title = ?, text = ?, created = ?\',\n  [\'another entry\', \'because 2 entries make a better test\', \'2010-08-16 12:42:15\']\n);\n\nclient.query(\n  \'SELECT * FROM \'+TEST_TABLE,\n  function selectCb(err, results, fields) {\n    if (err) {\n      throw err;\n    }\n\n    console.log(results);\n    console.log(fields);\n    client.end();\n  }\n);\n```\n\n## API\n\n### mysql.createClient([options])\n\nCreates a new client instance. Any client property can be set using the\n`options` object.\n\n### client.host = \'localhost\'\n\nThe host to connect to.\n\n### client.port = 3306\n\nThe port to connect to.\n\n### client.user = null\n\nThe username to authenticate as.\n\n### client.password = null\n\nThe password to use.\n\n### client.database = null\n\nThe name of the database to connect to (optional).\n\n### client.debug = false\n\nPrints incoming and outgoing packets, useful for development / testing purposes.\n\n### client.flags = Client.defaultFlags\n\nConnection flags send to the server.\n\n### client.query(sql, [params, cb])\n\nSends a `sql` query to the server. `\'?\'` characters can be used as placeholders\nfor an array of `params` that will be safely escaped before sending the final\nquery.\n\nThis method returns a `Query` object which can be used to stream incoming row\ndata.\n\n**Warning:** `sql` statements with multiple queries separated by semicolons\nare not supported yet.\n\n### client.ping([cb])\n\nSends a ping command to the server.\n\n### client.useDatabase(database, [cb])\n\nSame as issuing a `\'USE <database>\'` query.\n\n### client.statistics([cb])\n\nReturns some server statistics provided by MySql.\n\n### client.format(sql, params)\n\nAllows to safely insert a list of `params` into a `sql` string using the\nplaceholder mechanism described above.\n\n### client.escape(val)\n\nEscapes a single `val` for use inside of a sql string.\n\n### client.destroy()\n\nForces the client connection / socket to be destroyed right away.\n\n### client.end([cb])\n\nSchedule a COM_QUIT packet for closing the connection. All currently queued\nqueries will still execute before the graceful termination of the connection\nis attempted.\n\n### client event: \'error\' (err)\n\nWhen the client has no callback / delegate for an error, it is emitted with this\nevent instead.\n\n### new mysql.Query()\n\nQuery objects are not meant to be invoked manually. To get a query object, use\nthe `client.query` API.\n\n### query event: \'error\' (err)\n\nEmitted when mysql returns an error packet for the query.\n\n### query event: \'field\' (field)\n\nEmitted upon receiving a field packet from mysql.\n\n### query event: \'row\' (row)\n\nEmitted upon receiving a row. An option for streaming the contents of the row\nitself will be made available soon.\n\n### query event: \'end\' ([result])\n\nEmitted once the query is finished. In case there is no result set, a `result`\nparameter is provided which contains the information from the mysql OK packet.\n\n## FAQ\n\n### How do I compile this module?\n\nThis module is written entirely in JavaScript. There is no dependency on external\nC libraries such as libmysql. That means you don\'t have to compile this module\nat all.\n\n### How can I retrieve the id from the last inserted record?\n\n    client.query(\'INSERT INTO my_table SET title = ?\', function(err, info) {\n      console.log(info.insertId);\n    });\n\n### How can I find out the number of rows affected by the last query?\n\n    client.query(\'UPDATE my_table SET title = ?\', function(err, info) {\n      console.log(info.affectedRows);\n    });\n\n## Todo\n\nAt this point the module is ready to be tried out, but a lot of things are yet to be done:\n\n* Implement retry\n* Pause / resume\n* Remaining mysql commands\n* Prepared Statements\n* Packet\'s > 16 MB\n* Compression\n* Decide how to handle queries with multiple statements\n* Transactions\n\nA stop-gap solution to support multiple statements and transactions is\navailable. Check it out here: http://github.com/bminer/node-mysql-queues\n\n## Contributors\n\n[Click here][contributors] for a full list of contributors.\n\n[contributors]: https://github.com/felixge/node-mysql/contributors\n\n## Sponsors\n\n* [Joyent](http://www.joyent.com/) - Main sponsor, you should check out their [node.js hosting](https://no.de/).\n* [pinkbike.com](http://pinkbike.com/) - The most awesome biking site there is\n\nThis is a rather large project requiring a significant amount of my limited resources.\n\nIf your company could benefit from a well-engineered non-blocking mysql driver, and\nwants to support this project, I would greatly appriciate any sponsorship you may be\nable to provide. All sponsors will get lifetime display in this readme, priority\nsupport on problems, and votes on roadmap decisions. If you are interested, contact\nme at [felix@debuggable.com](mailto:felix@debuggable.com) for details.\n\nOf course I\'m also happy about code contributions. If you\'re interested in\nworking on features, just get in touch so we can talk about API design and\ntesting.\n\n[transloadit]: http://transloadit.com/\n\n## Changelog\n\n### v0.9.6\n\n* Escape array values so they produce sql arrays (Roger Castells, Colin Smith)\n* docs: mention mysql transaction stop gap solution (Blake Miner)\n* docs: Mention affectedRows in FAQ (Michael Baldwin)\n\n### v0.9.5\n\n* Fix #142 Driver stalls upon reconnect attempt that\'s immediately closed\n* Add travis build\n* Switch to urun as a test runner\n* Switch to utest for unit tests\n* Remove fast-or-slow dependency for tests\n* Split integration tests into individual files again\n\n### v0.9.4\n\n* Expose package.json as `mysql.PACKAGE` (#104)\n\n### v0.9.3\n\n* Set default `client.user` to root\n* Fix #91: Client#format should not mutate params array\n* Fix #94: TypeError in client.js\n* Parse decimals as string (vadimg)\n\n### v0.9.2\n\n* The underlaying socket connection is now managed implicitly rather than explicitly.\n* Check the [upgrading guide][] for a full list of changes.\n\n### v0.9.1\n\n* Fix issue #49 / `client.escape()` throwing exceptions on objects. (Nick Payne)\n* Drop < v0.4.x compatibility. From now on you need node v0.4.x to use this module.\n\n### Older releases\n\nThese releases were done before starting to maintain the above Changelog:\n\n* [v0.9.0](https://github.com/felixge/node-mysql/compare/v0.8.0...v0.9.0)\n* [v0.8.0](https://github.com/felixge/node-mysql/compare/v0.7.0...v0.8.0)\n* [v0.7.0](https://github.com/felixge/node-mysql/compare/v0.6.0...v0.7.0)\n* [v0.6.0](https://github.com/felixge/node-mysql/compare/v0.5.0...v0.6.0)\n* [v0.5.0](https://github.com/felixge/node-mysql/compare/v0.4.0...v0.5.0)\n* [v0.4.0](https://github.com/felixge/node-mysql/compare/v0.3.0...v0.4.0)\n* [v0.3.0](https://github.com/felixge/node-mysql/compare/v0.2.0...v0.3.0)\n* [v0.2.0](https://github.com/felixge/node-mysql/compare/v0.1.0...v0.2.0)\n* [v0.1.0](https://github.com/felixge/node-mysql/commits/v0.1.0)\n\n## License\n\nnode-mysql is licensed under the MIT license.\n',
338 silly resolved     _id: 'mysql@0.9.6',
338 silly resolved     _from: 'mysql@>=0.7.0' } ]
339 info install sqlite@1.0.4 into /Users/czarft/node_modules/persistencejs
340 info install mysql@0.9.6 into /Users/czarft/node_modules/persistencejs
341 info installOne sqlite@1.0.4
342 info installOne mysql@0.9.6
343 verbose from cache /Users/czarft/.npm/sqlite/1.0.4/package/package.json
344 verbose from cache /Users/czarft/.npm/mysql/0.9.6/package/package.json
345 info /Users/czarft/node_modules/persistencejs/node_modules/sqlite unbuild
346 verbose read json /Users/czarft/node_modules/persistencejs/node_modules/sqlite/package.json
347 info /Users/czarft/node_modules/persistencejs/node_modules/mysql unbuild
348 verbose read json /Users/czarft/node_modules/persistencejs/node_modules/mysql/package.json
349 verbose tar unpack /Users/czarft/.npm/sqlite/1.0.4/package.tgz
350 verbose tar unpack /Users/czarft/.npm/mysql/0.9.6/package.tgz
351 silly lockFile 930b7321-ersistencejs-node-modules-sqlite /Users/czarft/node_modules/persistencejs/node_modules/sqlite
352 verbose lock /Users/czarft/node_modules/persistencejs/node_modules/sqlite /Users/czarft/.npm/930b7321-ersistencejs-node-modules-sqlite.lock
353 silly lockFile 985b742e-persistencejs-node-modules-mysql /Users/czarft/node_modules/persistencejs/node_modules/mysql
354 verbose lock /Users/czarft/node_modules/persistencejs/node_modules/mysql /Users/czarft/.npm/985b742e-persistencejs-node-modules-mysql.lock
355 silly gunzTarPerm modes [ '755', '644' ]
356 silly gunzTarPerm modes [ '755', '644' ]
357 silly gunzTarPerm extractEntry package.json
358 silly gunzTarPerm extractEntry package.json
359 silly gunzTarPerm extractEntry .npmignore
360 silly gunzTarPerm extractEntry README.md
361 silly gunzTarPerm extractEntry .npmignore
362 silly gunzTarPerm extractEntry index.js
363 silly gunzTarPerm extractEntry sqlite.js
364 silly gunzTarPerm extractEntry build.sh
365 silly gunzTarPerm extractEntry v8.log
366 silly gunzTarPerm extractEntry deps/mpool-2.1.0/README
367 silly gunzTarPerm extractEntry deps/mpool-2.1.0/ChangeLog.1
368 silly gunzTarPerm extractEntry deps/mpool-2.1.0/Makefile
369 silly gunzTarPerm extractEntry deps/mpool-2.1.0/mpool.c
370 silly gunzTarPerm extractEntry deps/mpool-2.1.0/mpool.h
371 silly gunzTarPerm extractEntry deps/mpool-2.1.0/mpool_loc.h
372 silly gunzTarPerm extractEntry deps/mpool-2.1.0/mpool_t.c
373 silly gunzTarPerm extractEntry deps/mpool-2.1.0/NEWS
374 silly gunzTarPerm extractEntry deps/sqlite/shell.c
375 silly gunzTarPerm extractEntry deps/sqlite/sqlite3.c
376 silly gunzTarPerm extractEntry lib/auth.js
377 silly gunzTarPerm extractEntry lib/client.js
378 silly gunzTarPerm extractEntry lib/constants.js
379 silly gunzTarPerm extractEntry lib/mysql.js
380 silly gunzTarPerm extractEntry lib/outgoing_packet.js
381 silly gunzTarPerm extractEntry lib/parser.js
382 silly gunzTarPerm extractEntry lib/query.js
383 silly gunzTarPerm extractEntry License
384 silly gunzTarPerm extractEntry .travis.yml
385 silly gunzTarPerm extractEntry new.txt
386 silly gunzTarPerm extractEntry benchmark/node-mysql/insert.js
387 silly gunzTarPerm extractEntry benchmark/node-mysql/select.js
388 silly gunzTarPerm extractEntry benchmark/php/insert-select.php
389 silly gunzTarPerm extractEntry Readme.md
390 silly gunzTarPerm extractEntry test/common.js
391 silly gunzTarPerm extractEntry test/config.template.js
392 silly gunzTarPerm extractEntry test/run.js
393 silly gunzTarPerm extractEntry test/fixture/columnia.sql
394 silly gunzTarPerm extractEntry test/fixture/libmysql_password.c
395 silly gunzTarPerm extractEntry test/integration/Client/commands/test-ping.js
396 silly gunzTarPerm extractEntry test/integration/Client/commands/test-statistics.js
397 silly gunzTarPerm extractEntry test/integration/Client/commands/test-useDatabase.js
398 silly gunzTarPerm extractEntry test/integration/Client/connection/test-automatic-connect.js
399 silly gunzTarPerm extractEntry test/integration/Client/connection/test-automatic-reconnect-on-timeout.js
400 silly gunzTarPerm extractEntry test/integration/Client/connection/test-bad-credentials.js.js
401 silly gunzTarPerm extractEntry test/integration/Client/connection/test-connection-errors-go-to-callback.js.js
402 silly gunzTarPerm extractEntry test/integration/Client/connection/test-reconnect-closed-client.js.js
403 silly gunzTarPerm extractEntry test/integration/Query/errors/test-should-delegate-to-client-if-needed.js
404 silly gunzTarPerm extractEntry test/integration/Query/errors/test-should-emit-error-event.js
405 silly gunzTarPerm extractEntry test/integration/Query/errors/test-should-not-leave-client-in-broken-state.js
406 silly gunzTarPerm extractEntry test/integration/Query/errors/test-should-raise-callback.js
407 silly gunzTarPerm extractEntry test/integration/Query/misc/test-column-ordering.js
408 silly gunzTarPerm extractEntry test/integration/Query/results/test-empty-string.js
409 silly gunzTarPerm extractEntry test/integration/Query/results/test-long-fields.js
410 silly gunzTarPerm extractEntry test/integration/Query/results/test-null-value.js
411 silly gunzTarPerm extractEntry test/integration/Query/results/test-real-world-usage.js
412 silly gunzTarPerm extractEntry test/integration/Query/results/test-virtual-fields.js
413 silly gunzTarPerm extractEntry test/unit/test-client.js
414 silly gunzTarPerm extractEntry test/unit/test-mysql.js
415 silly gunzTarPerm extractEntry test/unit/legacy/common.js
416 silly gunzTarPerm extractEntry test/unit/legacy/test-auth.js
417 silly gunzTarPerm extractEntry test/unit/legacy/test-client.js
418 silly gunzTarPerm extractEntry test/unit/legacy/test-outgoing-packet.js
419 silly gunzTarPerm extractEntry test/unit/legacy/test-parser.js
420 silly gunzTarPerm extractEntry test/unit/legacy/test-query.js
421 silly gunzTarPerm extractEntry tool/pcap-mysql.js
422 silly gunzTarPerm extractEntry Makefile
423 silly gunzTarPerm extractEntry deps/sqlite/sqlite3.h
424 silly gunzTarPerm extractEntry deps/sqlite/sqlite3ext.h
425 silly gunzTarPerm extractEntry async-testing/LICENSE
426 silly gunzTarPerm extractEntry async-testing/async_testing.js
427 silly gunzTarPerm extractEntry async-testing/AUTHORS
428 silly gunzTarPerm extractEntry async-testing/examples/test-readme.js
429 silly gunzTarPerm extractEntry async-testing/examples/test-suites.js
430 silly gunzTarPerm extractEntry async-testing/node-async-test
431 silly gunzTarPerm extractEntry async-testing/README.markdown
432 silly gunzTarPerm extractEntry async-testing/todo.txt
433 silly gunzTarPerm extractEntry .gitmodules
434 silly gunzTarPerm extractEntry run-tests
435 silly gunzTarPerm extractEntry src/database.cc
436 silly gunzTarPerm extractEntry src/database.h
437 silly gunzTarPerm extractEntry src/sqlite3_bindings.cc
438 silly gunzTarPerm extractEntry src/sqlite3_bindings.h
439 silly gunzTarPerm extractEntry src/statement.cc
440 silly gunzTarPerm extractEntry src/statement.h
441 silly gunzTarPerm extractEntry tests/test-affected-rows.js
442 silly gunzTarPerm extractEntry tests/test-bind-placeholders.js
443 silly gunzTarPerm extractEntry tests/test-bind-strings.js
444 silly gunzTarPerm extractEntry tests/test-last-inserted-id.js
445 silly gunzTarPerm extractEntry tests/test-prepare.js
446 silly gunzTarPerm extractEntry tests/test-statement-fetchall.js
447 silly gunzTarPerm extractEntry tests/test-statement-step.js
448 silly gunzTarPerm extractEntry tests/lib/common.js
449 silly gunzTarPerm extractEntry tests/old/speedtest-low-parallel-binds.js
450 silly gunzTarPerm extractEntry tests/old/speedtest-low-parallel.js
451 silly gunzTarPerm extractEntry tests/old/speedtest-low.js
452 silly gunzTarPerm extractEntry tests/old/speedtest.js
453 silly gunzTarPerm extractEntry tests/old/speedtest2.js
454 silly gunzTarPerm extractEntry tests/old/test2.js
455 silly gunzTarPerm extractEntry tests/old/speedtest.rb
456 silly gunzTarPerm extractEntry tests/old/speedtest2.rb
457 silly gunzTarPerm extractEntry wscript
458 verbose read json /Users/czarft/node_modules/persistencejs/node_modules/mysql/package.json
459 silly lockFile 985b742e-persistencejs-node-modules-mysql /Users/czarft/node_modules/persistencejs/node_modules/mysql
460 info preinstall mysql@0.9.6
461 verbose from cache /Users/czarft/node_modules/persistencejs/node_modules/mysql/package.json
462 verbose readDependencies using package.json deps
463 verbose from cache /Users/czarft/node_modules/persistencejs/node_modules/mysql/package.json
464 verbose readDependencies using package.json deps
465 verbose cache add [ 'hashish@0.0.4', null ]
466 silly cache add name=undefined spec="hashish@0.0.4" args=["hashish@0.0.4",null]
467 verbose parsed url { pathname: 'hashish@0.0.4',
467 verbose parsed url   path: 'hashish@0.0.4',
467 verbose parsed url   href: 'hashish@0.0.4' }
468 silly cache add name="hashish" spec="0.0.4" args=["hashish","0.0.4"]
469 verbose parsed url { pathname: '0.0.4', path: '0.0.4', href: '0.0.4' }
470 verbose addNamed [ 'hashish', '0.0.4' ]
471 verbose addNamed [ '0.0.4', '0.0.4' ]
472 silly lockFile 2f8e09bc-hashish-0-0-4 hashish@0.0.4
473 verbose lock hashish@0.0.4 /Users/czarft/.npm/2f8e09bc-hashish-0-0-4.lock
474 verbose url raw hashish/0.0.4
475 verbose url resolving [ 'https://registry.npmjs.org/', './hashish/0.0.4' ]
476 verbose url resolved https://registry.npmjs.org/hashish/0.0.4
477 info trying registry request attempt 1 at 18:30:08
478 verbose etag "3RYQIMIZ9EDRPJZNVVJDXF1PE"
479 http GET https://registry.npmjs.org/hashish/0.0.4
480 verbose read json /Users/czarft/node_modules/persistencejs/node_modules/sqlite/package.json
481 silly lockFile 930b7321-ersistencejs-node-modules-sqlite /Users/czarft/node_modules/persistencejs/node_modules/sqlite
482 info preinstall sqlite@1.0.4
483 verbose unsafe-perm in lifecycle true
484 silly exec sh "-c" "node-waf configure build"
485 silly sh,-c,node-waf configure build,/Users/czarft/node_modules/persistencejs/node_modules/sqlite spawning
486 http 304 https://registry.npmjs.org/hashish/0.0.4
487 silly registry.get cb [ 304,
487 silly registry.get   { server: 'CouchDB/1.2.0 (Erlang OTP/R15B)',
487 silly registry.get     etag: '"3RYQIMIZ9EDRPJZNVVJDXF1PE"',
487 silly registry.get     date: 'Fri, 05 Oct 2012 11:30:12 GMT',
487 silly registry.get     'content-length': '0' } ]
488 verbose etag hashish/0.0.4 from cache
489 verbose read json /Users/czarft/.npm/hashish/0.0.4/package/package.json
490 silly lockFile 2f8e09bc-hashish-0-0-4 hashish@0.0.4
491 silly resolved [ { name: 'hashish',
491 silly resolved     version: '0.0.4',
491 silly resolved     description: 'Hash data structure manipulation functions',
491 silly resolved     main: './index.js',
491 silly resolved     repository:
491 silly resolved      { type: 'git',
491 silly resolved        url: 'http://github.com/substack/node-hashish.git' },
491 silly resolved     keywords:
491 silly resolved      [ 'hash',
491 silly resolved        'object',
491 silly resolved        'convenience',
491 silly resolved        'manipulation',
491 silly resolved        'data structure' ],
491 silly resolved     author:
491 silly resolved      { name: 'James Halliday',
491 silly resolved        email: 'mail@substack.net',
491 silly resolved        url: 'http://substack.net' },
491 silly resolved     dependencies: { traverse: '>=0.2.4' },
491 silly resolved     devDependencies: { expresso: '>=0.6.0' },
491 silly resolved     scripts: { test: 'expresso' },
491 silly resolved     license: 'MIT/X11',
491 silly resolved     engine: [ 'node >=0.2.0' ],
491 silly resolved     readme: 'Hashish\n=======\n\nHashish is a node.js library for manipulating hash data structures.\nIt is distilled from the finest that ruby, perl, and haskell have to offer by\nway of hash/map interfaces.\n\nHashish provides a chaining interface, where you can do:\n\n    var Hash = require(\'hashish\');\n    \n    Hash({ a : 1, b : 2, c : 3, d : 4 })\n        .map(function (x) { return x * 10 })\n        .filter(function (x) { return x < 30 })\n        .forEach(function (x, key) {\n            console.log(key + \' => \' + x);\n        })\n    ;\n    \nOutput:\n\n    a => 10\n    b => 20\n\nSome functions and attributes in the chaining interface are terminal, like\n`.items` or `.detect()`. They return values of their own instead of the chain\ncontext.\n\nEach function in the chainable interface is also attached to `Hash` in chainless\nform:\n\n    var Hash = require(\'hashish\');\n    var obj = { a : 1, b : 2, c : 3, d : 4 };\n    \n    var mapped = Hash.map(obj, function (x) {\n        return x * 10\n    });\n    \n    console.dir(mapped);\n\nOutput:\n\n    { a: 10, b: 20, c: 30, d: 40 }\n\nIn either case, the \'this\' context of the function calls is the same object that\nthe chained functions return, so you can make nested chains.\n\nMethods\n=======\n\nforEach(cb)\n-----------\n\nFor each key/value in the hash, calls `cb(value, key)`.\n\nmap(cb)\n-------\n\nFor each key/value in the hash, calls `cb(value, key)`.\nThe return value of `cb` is the new value at `key` in the resulting hash.\n\nfilter(cb)\n----------\n\nFor each key/value in the hash, calls `cb(value, key)`.\nThe resulting hash omits key/value pairs where `cb` returned a falsy value.\n\ndetect(cb)\n----------\n\nReturns the first value in the hash for which `cb(value, key)` is non-falsy.\nOrder of hashes is not well-defined so watch out for that.\n\nreduce(cb)\n----------\n\nReturns the accumulated value of a left-fold over the key/value pairs.\n\nsome(cb)\n--------\n\nReturns a boolean: whether or not `cb(value, key)` ever returned a non-falsy\nvalue.\n\nupdate(obj1, [obj2, obj3, ...])\n-----------\n\nMutate the context hash, merging the key/value pairs from the passed objects\nand overwriting keys from the context hash if the current `obj` has keys of\nthe same name. Falsy arguments are silently ignored.\n\nupdateAll([ obj1, obj2, ... ])\n------------------------------\n\nLike multi-argument `update()` but operate on an array directly.\n\nmerge(obj1, [obj2, obj3, ...])\n----------\n\nMerge the key/value pairs from the passed objects into the resultant hash\nwithout modifying the context hash. Falsy arguments are silently ignored.\n\nmergeAll([ obj1, obj2, ... ])\n------------------------------\n\nLike multi-argument `merge()` but operate on an array directly.\n\nhas(key)\n--------\n\nReturn whether the hash has a key, `key`.\n\nvaluesAt(keys)\n--------------\n\nReturn an Array with the values at the keys from `keys`.\n\ntap(cb)\n-------\n\nCall `cb` with the present raw hash.\nThis function is chainable.\n\nextract(keys)\n-------------\n\nFilter by including only those keys in `keys` in the resulting hash.\n\nexclude(keys)\n-------------\n\nFilter by excluding those keys in `keys` in the resulting hash.\n\nAttributes\n==========\n\nThese are attributes in the chaining interface and functions in the `Hash.xxx`\ninterface.\n\nkeys\n----\n\nReturn all the enumerable attribute keys in the hash.\n\nvalues\n------\n\nReturn all the enumerable attribute values in the hash.\n\ncompact\n-------\n\nFilter out values which are `=== undefined`.\n\nclone\n-----\n\nMake a deep copy of the hash.\n\ncopy\n----\n\nMake a shallow copy of the hash.\n\nlength\n------\n\nReturn the number of key/value pairs in the hash.\nNote: use `Hash.size()` for non-chain mode.\n\nsize\n----\n\nAlias for `length` since `Hash.length` is masked by `Function.prototype`.\n\nSee Also\n========\n\nSee also [creationix\'s pattern/hash](http://github.com/creationix/pattern),\nwhich does a similar thing except with hash inputs and array outputs.\n\nInstallation\n============\n\nTo install with [npm](http://github.com/isaacs/npm):\n \n    npm install hashish\n\nTo run the tests with [expresso](http://github.com/visionmedia/expresso):\n\n    expresso\n',
491 silly resolved     _id: 'hashish@0.0.4',
491 silly resolved     _from: 'hashish@0.0.4' } ]
492 info install hashish@0.0.4 into /Users/czarft/node_modules/persistencejs/node_modules/mysql
493 info installOne hashish@0.0.4
494 verbose from cache /Users/czarft/.npm/hashish/0.0.4/package/package.json
495 info /Users/czarft/node_modules/persistencejs/node_modules/mysql/node_modules/hashish unbuild
496 verbose read json /Users/czarft/node_modules/persistencejs/node_modules/mysql/node_modules/hashish/package.json
497 verbose tar unpack /Users/czarft/.npm/hashish/0.0.4/package.tgz
498 silly lockFile 94e47869-dules-mysql-node-modules-hashish /Users/czarft/node_modules/persistencejs/node_modules/mysql/node_modules/hashish
499 verbose lock /Users/czarft/node_modules/persistencejs/node_modules/mysql/node_modules/hashish /Users/czarft/.npm/94e47869-dules-mysql-node-modules-hashish.lock
500 silly gunzTarPerm modes [ '755', '644' ]
501 silly gunzTarPerm extractEntry package.json
502 silly gunzTarPerm extractEntry index.js
503 silly gunzTarPerm extractEntry examples/chain.js
504 silly gunzTarPerm extractEntry examples/map.js
505 silly gunzTarPerm extractEntry README.markdown
506 silly gunzTarPerm extractEntry test/hash.js
507 silly gunzTarPerm extractEntry test/property.js
508 verbose read json /Users/czarft/node_modules/persistencejs/node_modules/mysql/node_modules/hashish/package.json
509 silly lockFile 94e47869-dules-mysql-node-modules-hashish /Users/czarft/node_modules/persistencejs/node_modules/mysql/node_modules/hashish
510 info preinstall hashish@0.0.4
511 verbose from cache /Users/czarft/node_modules/persistencejs/node_modules/mysql/node_modules/hashish/package.json
512 verbose readDependencies using package.json deps
513 verbose from cache /Users/czarft/node_modules/persistencejs/node_modules/mysql/node_modules/hashish/package.json
514 verbose readDependencies using package.json deps
515 verbose cache add [ 'traverse@>=0.2.4', null ]
516 silly cache add name=undefined spec="traverse@>=0.2.4" args=["traverse@>=0.2.4",null]
517 verbose parsed url { pathname: 'traverse@%3E=0.2.4',
517 verbose parsed url   path: 'traverse@%3E=0.2.4',
517 verbose parsed url   href: 'traverse@%3E=0.2.4' }
518 silly cache add name="traverse" spec=">=0.2.4" args=["traverse",">=0.2.4"]
519 verbose parsed url { pathname: '%3E=0.2.4', path: '%3E=0.2.4', href: '%3E=0.2.4' }
520 verbose addNamed [ 'traverse', '>=0.2.4' ]
521 verbose addNamed [ null, '>=0.2.4' ]
522 silly lockFile b840e0c7-traverse-0-2-4 traverse@>=0.2.4
523 verbose lock traverse@>=0.2.4 /Users/czarft/.npm/b840e0c7-traverse-0-2-4.lock
524 silly addNameRange { name: 'traverse', range: '>=0.2.4', hasData: false }
525 verbose url raw traverse
526 verbose url resolving [ 'https://registry.npmjs.org/', './traverse' ]
527 verbose url resolved https://registry.npmjs.org/traverse
528 info trying registry request attempt 1 at 18:30:12
529 verbose etag "5VOQPSTU43503DG4TRO9YLF4Z"
530 http GET https://registry.npmjs.org/traverse
531 info sqlite@1.0.4 Failed to exec preinstall script
532 info /Users/czarft/node_modules/persistencejs/node_modules/sqlite unbuild
533 verbose from cache /Users/czarft/node_modules/persistencejs/node_modules/sqlite/package.json
534 info preuninstall sqlite@1.0.4
535 info uninstall sqlite@1.0.4
536 verbose false,/Users/czarft/node_modules,/Users/czarft/node_modules/persistencejs/node_modules unbuild sqlite@1.0.4
537 info postuninstall sqlite@1.0.4
538 verbose about to build /Users/czarft/node_modules/persistencejs
539 info /Users/czarft/node_modules/persistencejs unbuild
540 verbose from cache /Users/czarft/node_modules/persistencejs/package.json
541 info preuninstall persistencejs@0.2.5
542 info uninstall persistencejs@0.2.5
543 verbose true,/Users/czarft/node_modules,/Users/czarft/node_modules unbuild persistencejs@0.2.5
544 info postuninstall persistencejs@0.2.5
545 error sqlite@1.0.4 preinstall: `node-waf configure build`
545 error `sh "-c" "node-waf configure build"` failed with 1
546 error Failed at the sqlite@1.0.4 preinstall script.
546 error This is most likely a problem with the sqlite package,
546 error not with npm itself.
546 error Tell the author that this fails on your system:
546 error     node-waf configure build
546 error You can get their info via:
546 error     npm owner ls sqlite
546 error There is likely additional logging output above.
547 error System Darwin 11.4.2
548 error command "node" "/usr/local/bin/npm" "install" "persistencejs"
549 error cwd /Users/czarft/Sites/mobile/phonegap/medico/www/nodejs
550 error node -v v0.8.11
551 error npm -v 1.1.62
552 error code ELIFECYCLE
553 verbose exit [ 1, true ]
